version: 2.1
commands:
  print_pipeline_id:
    description: "A very simple command for demonstration purposes"
    steps:
      - run: echo $CIRCLE_WORKFLOW_ID #<< parameters.to >>

  destroy_environment:
    steps:
      - run:
          name: Destroy environment
          # ${CIRCLE_WORKFLOW_ID} is a Built-in environment variable 
          # ${CIRCLE_WORKFLOW_ID:0:5} takes the first 5 chars of the variable CIRCLE_CI_WORKFLOW_ID 
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5}
jobs:
#   say-hello:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run:
#           name: "Say hello"
#           command: "echo Hello, World!"

#   print-env-variable:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run:
#           name: "this is my name >> "
#           command: echo ${My_Name}
#       - print_pipeline_id

#   save_hello_world_output:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - run:
#           name: "create file"
#           command: |
#             echo " hello world !! from the output " > output.txt
#       - persist_to_workspace:
#           root: ~/    
#           paths: 
#            - ./*

#   print_output_file:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - attach_workspace:
#           at: ~/
#       - run:
#           command: |
#             cat output.txt

  # create_infrastructure: 
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run:
  #           name: Create Cloudformation Stack
  #           command: |
  #             aws cloudformation deploy \
  #               --template-file template.yml \
  #               --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:5} \
  #               --region us-east-1

  # get_EC2_PublicIpAddress: 
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run:
  #           name: get EC2 PublicIpAddress
  #           command: |
  #             yum install -y tar gzip
  #             echo [all] > inventory
  #             aws ec2 describe-instances --query 'Reservations[*].Instances[*].PublicIpAddress' --output text >> inventory
  #       - persist_to_workspace:
  #           root: ~/    
  #           paths: 
  #           - ./*
  # configure_infrastructure: 
  #     docker:
  #       - image: python:3.7-alpine3.11
  #     steps:
  #       - checkout
  #       - add_ssh_keys:
  #               # You can get this ID in the section where you registered the SSH Key
  #               fingerprints: ["92:1f:f7:b8:87:b3:bf:8d:35:12:d2:1c:49:4a:e3:9e"] 
  #       - attach_workspace:
  #           at: ~/
  #       - run:
  #           name: Install Ansible
  #           command: |
  #             # Install Ansible
  #             apk add --update ansible
  #       - run:
  #           name: Run Playbook and Configure server
  #           command: |
  #             ansible-playbook -i inventory main.yml
  # smoke_test:
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       # - run: apk add --update curl
  #       - run:
  #           name: smoke test
  #           command: |
  #             # URL="https://blog.udacity.com/"
  #             # # Test if website exists
  #             # if curl -s --head ${URL} 
  #             # then
  #             #   return 0
  #             # else
  #               return 1
  #             # fi

  #       - destroy_environment

  create_and_deploy_front_end:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run:
            name: Execute bucket.yml - Create Cloudformation Stack
            command: |
              aws cloudformation deploy \
              --template-file bucket.yml \
              --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
              --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
        # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
        - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete

# Fetch and save the pipeline ID (bucket ID) responsible for the last release.
  # get_last_deployment_id:
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run: yum install -y tar gzip
  #       - run:
  #           name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
  #           command: |
  #             aws cloudformation \
  #             list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
  #             --no-paginate --output text > ~/textfile.txt
  #       - persist_to_workspace:
  #           root: ~/
  #           paths: 
  #             - textfile.txt 

# Executes the cloudfront.yml template that will modify the existing CloudFront Distribution, change its target from the old bucket to the new bucket - `mybucket-${CIRCLE_WORKFLOW_ID:0:7}`. 
# Notice here we use the stack name `production-distro` which is the same name we used while deploying to the S3 bucket manually.
  # promote_to_production:
  #     docker:
  #       - image: amazon/aws-cli
  #     steps:
  #       - checkout
  #       - run:
  #           name: Execute cloudfront.yml
  #           command: |
  #             aws cloudformation deploy \
  #             --template-file cloudfront.yml \
  #             --stack-name production-distro \
  #             --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
workflows:
  my-workflow:
    jobs:
      # - say-hello
      # - print-env-variable:
      #     requires: [say-hello]
      # - save_hello_world_output
      # - print_output_file:
      #     requires: [save_hello_world_output]
      # - create_infrastructure
      # - get_EC2_PublicIpAddress:
      #     requires: [create_infrastructure]
      # - configure_infrastructure:
      #     requires: [get_EC2_PublicIpAddress]
      # - smoke_test:
      #     requires: [create_infrastructure]
      - create_and_deploy_front_end

